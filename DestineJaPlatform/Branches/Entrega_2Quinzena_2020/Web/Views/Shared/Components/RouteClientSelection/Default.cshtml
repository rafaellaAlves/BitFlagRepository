@inject Web.Helpers.DropDownListHelper dropDownListHelper
@inject Services.Route.RouteServices routeServices

<style type="text/css">
    #route-client-add-table tr:not(.group-start) td:last-child {
        text-align: center;
    }

/*    #route-client-add-table_wrapper .dataTables_scrollHead, #route-client-add-table_wrapper .dataTables_scrollHeadInner,
    #route-client-address-add-table_wrapper .dataTables_scrollHead, #route-client-address-add-table_wrapper .dataTables_scrollHeadInner {
        min-width: 910px;
    }*/

    @@media (min-width: 992px) {
        #route-client-modal .modal-lg, .modal-xl {
            max-width: 1000px;
        }
    }
</style>
<div class="row" id="route-client-modal-inputs-set-city">
    <div class="col-md">
        <div class="input-group mb-3">
            @Html.DropDownList("State", dropDownListHelper.GetStates(""), "Estado", new { Class = "form-control w-100", onchange = "updateCitySelect()", style = "max-width: 160px;" })
            <select name="City" class="form-control required">
                <option value="">Cidade</option>
                @{
                    await foreach (var item in routeServices.GetContractAndServiceAvailbleCities())
                    {
                        <option data-state="@item.State" value="@item.City">@item.City</option>
                    }
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-primary" onclick="AddAddressToTable()" style="display: flex; height: 40px;"><i class="simple-icon-plus"></i><span class="d-none d-md-block">&nbsp;Adicionar Cidade</span></button>
            </div>
        </div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-12 table-responsive">
        <table class="table table-bordered table-condensed" id="route-client-address-add-table" style="max-height: 250px;">
            <thead>
                <tr style="background: #a1a1a1; color: white;">
                    <th>Estado</th>
                    <th>Cidade</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<hr />
<div class="row" id="route-client-modal-inputs-get-clients">
    <div class="col-12">
        <div class="input-group mb-3">
            <select name="ClientType" class="form-control">
                <option value="">Todos Geradores</option>
                <option value="1">Geradores com Contrato</option>
                <option value="2">Geradores sem Contrato</option>
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-primary" onclick="getClientsByAddress()" style="display: flex; height: 40px;"><i class="simple-icon-plus"></i><span class="d-none d-md-block">&nbsp;Carregar Geradores</span></button>
            </div>
        </div>
    </div>
    <div class="col-12 form-group">
        <input class="form-control" data-toggle="search-datatable" data-target="#route-client-add-table" placeholder="Pesquisar..." />
    </div>
    <div class="col-12 form-group table-responsive">
        <table class="table table-bordered table-condensed" id="route-client-add-table">
            <thead>
                <tr style="background: #a1a1a1; color: white;">
                    <th class="text-center"><input type="checkbox" id="select-all-clients-checkbox" onclick="selectAllClientsCheckbox(this)" /></th>
                    <th>Código</th>
                    <th>Gerador</th>
                    <th>Cidade</th>
                    <th>Bairro</th>
                    @*<th>Endereço</th>*@
                    <th>Contrato?</th>
                    <th>Situação</th>
                    <th>Está em Outra Rota?</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<div class="row mt-3">
    <div class="col">
        <hr />
        @*<button type="button" data-dismiss='modal' data-disabled="false" class="btn btn-secondary"><i class="simple-icon-close"></i> Fechar</button>*@
        <button type="button" class="btn btn-success float-right" onclick="selectAddresses()">Carregar Geradores Selecionados na Rota</button>
    </div>
</div>


<script type="text/javascript" asp-cut-key="route-client-selection">
    var routeClientTable, routeClientAddressAddTable, routeClientAddTable;
    //var collapsed_groups = {};

    $(document).ready(function () {
        routeClientAddressAddTable = $('#route-client-address-add-table').DataTable({
            serverSide: false,
            proccessing: true,
            searching: true,
            lengthChange: false,
            dom: 'tip',
            scrollY: '200px',
            scrollCollapse: true,
            paging: false,
            "bInfo": false
        });

        routeClientAddTable = $('#route-client-add-table').DataTable({
            proccessing: true,
            serverSide: false,
            searching: true,
            lengthChange: false,
            dom: 'tip',
            "paging": true,
            "info": false,
            scrollY: '400px',
            scrollCollapse: true,
            paging: false,
            'language': {
                "sEmptyTable": "Nenhum registro encontrado (Tente adicionar outros Estados/Cidades na tabela acima)"
            },
            "columnDefs": [{ orderable: false, targets: [0] }],
            //columnDefs: [
            //    { "visible": false, "targets": 1 },
            //],
            //rowGroup: {
            //    dataSrc: 1,
            //    startRender: function (rows, group) {
            //        //var count = $('[data-company-name="' + group + '"]').length;
            //        if (collapsed_groups[group] == null) collapsed_groups[group] = true;

            //        var collapsed = !!collapsed_groups[group];

            //        rows.nodes().each(function (r) {
            //            r.style.display = collapsed ? 'none' : '';
            //        });

            //        var icon = collapsed ? 'iconsminds-folder' : 'iconsminds-folder-open';
            //        return $('<tr/>', { class: 'group-start'})
            //            .append('<td colspan="8" style="cursor:pointer;"><i class="fas ' + icon + '" data-folder-group="' + group + '"></i>&nbsp;<b>' + group + '</b></td>')
            //            .attr('data-name', group)
            //            .toggleClass('collapsed', collapsed);
            //    }
            //},
            drawCallback: function () {
                $('#select-all-clients-checkbox')[0].checked = false;

                _setSelectedClientAsUnselectable();

                //função agrupar e expandir items da lista de endereços
                //$('#route-client-add-table tbody').unbind();
                //$('#route-client-add-table tbody').on('click', 'tr.group-start', function () {
                //    var name = $(this).data('name');
                //    collapsed_groups[name] = !collapsed_groups[name];
                //    routeClientAddTable.draw(false);
                //});
            }
        });

        updateCitySelect();

        routeClientAddTable.columns.adjust();
    });

    function updateCitySelect() {
        $('#route-client-modal [name="City"]').val('');

        var state = $('#route-client-modal [name="State"]').val();

        $('#route-client-modal [name="City"] option').hide();

        $('#route-client-modal [name="City"] option').each(function (i, e) {
            if ($(e).data('state') == state) $(e).show();
        });
        $('#route-client-modal [name="City"] option[value=""]').show();
    }

    function AddAddressToTable() {
        var state = $('#route-client-modal [name="State"]').val();
        var city = $('#route-client-modal [name="City"]').val();

        if (!validateInputs('route-client-modal-inputs-set-city') || $('[data-state="' + state + '"][data-city="' + city + '"]').length > 0) return;

        var r = routeClientAddressAddTable.row.add({
            0: state,
            1: city,
            2: '<div class="text-center"><a href="javascript:removeAddress(\'' + state + '\', \'' + city + '\')" class="badge badge-danger badge-pill"><i class="fa fa-trash-o"></i> Remover</a></div>'
        });

        $(r.node()).attr('data-state', state);
        $(r.node()).attr('data-city', city);

        routeClientAddressAddTable.draw();
    }

    function removeAddress(state, city) {
        var row = routeClientAddressAddTable.row($('[data-state="' + state + '"][data-city="' + city + '"]'));
        row.remove();

        routeClientAddressAddTable.draw();
    }

    function getClientsByAddress() {
        if (!validateInputs('route-client-modal-inputs-get-clients')) return;

        //collapsed_groups = {}; //Limpa os dados de expasão da tabela
        var p = [];

        $('[data-state][data-city]').each(function (i, e) {
            p.push({ name: 'Address.Index', value: i });
            p.push({ name: 'Address[' + i + '].State', value: $(e).data('state') });
            p.push({ name: 'Address[' + i + '].City', value: $(e).data('city') });
        });

        p.push({ name: 'ClientType', value: $('#route-client-modal [name="ClientType"]').val() });


        $.post('@Url.Action("GetClientsByAddress", "Route")', p, function (d) {
            routeClientAddTable.rows().remove();

            $.each(d, function (i, e) {
                var r = routeClientAddTable.row.add({
                    0: '<div class="text-center"><input type="checkbox" data-company-name="' + e.companyName + '" data-address-id="' + e.clientCollectionAddressId + '" /></div>',
                    1: e.clientId,
                    2: e.companyName ,
                    3: e.city,
                    4: e.neighborhood,
                    5: e.isContract ? '<span class="badge badge-pill badge-success">Sim</span>' : '<span class="badge badge-pill badge-danger">Não</span>',
                    6: isNull(e.contractSituationName, '-'),
                    //7: e.address + ', ' + e.number,
                    7: e.inOtherRoute == true ? '<span class="badge badge-pill badge-danger">Sim</span>' : '<span class="badge badge-pill badge-success">Não</span>'
                });

                $(r.node()).css('background-color', e.rowColor);
            });

            routeClientAddTable.draw();
            $('#route-client-add-table').DataTable().columns.adjust();

            if (typeof _setSelectedClientAsUnselectable == 'function') _setSelectedClientAsUnselectable();//desabilita os checkbox selecionados
        });
    }

    function selectAddresses() {
        if (typeof setAddressInRoute != 'function') return;

        var p = [];
        $.each($('#route-client-add-table input[type="checkbox"]:checked'), function (i, e) {
            if ($(e).attr('disabled') == 'disabled') return;

            p.push({ name: 'ClientCollectionAddressIds.Index', value: i });
            p.push({ name: 'ClientCollectionAddressIds[' + i + ']', value: $(e).data('address-id') });
        });

        setAddressInRoute(p);

        if (typeof _setSelectedClientAsUnselectable == 'function') _setSelectedClientAsUnselectable();//desabilita os checkbox selecionados
    }

    function setSelectedClientAsUnselectable(addressIds)
    {
        //$.each($('#route-client-add-table input[type="checkbox"]'), function (i, e) { e.checked = false; $(e).removeAttr('disabled'); });

        if (addressIds.length == 0) return;

        $.each(addressIds, function (i, e) {
            try {
                $('#route-client-add-table input[type="checkbox"][data-address-id="' + e.addressId + '"]').attr('disabled', 'disabled');
                $('#route-client-add-table input[type="checkbox"][data-address-id="' + e.addressId + '"]')[0].checked = true;
            } catch {}//É possivel que alguns checkbox não existam caso estejam em outras paginas da tabela
        });
    }

    function selectAllClientsCheckbox(sel) {
        $('#route-client-add-table input[type="checkbox"]').each(function (i, e) {
            if ($(e).attr('disabled') == 'disabled') return;
            e.checked = sel.checked;
        });
    }
</script>