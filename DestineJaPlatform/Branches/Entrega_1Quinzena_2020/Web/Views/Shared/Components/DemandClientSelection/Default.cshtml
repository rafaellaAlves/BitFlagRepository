@model DTO.Shared.EntityViewMode<DTO.Demand.DemandClientSelectionViewModel>

@inject Web.Helpers.DropDownListHelper dropDownListHelper
@inject Services.Demand.DemandServices demandServices
@inject Services.Route.RouteTypeServices routeTypeServices
@{
	var usingRouteForContract = (await routeTypeServices.GetDataByExternalCode("CONTRATO"))?.RouteTypeId == Model.Model.Route.RouteTypeId;
}
<style type="text/css">
	#demand-client-add-table tr:not(.group-start) td:last-child {
		text-align: center;
	}

	#demand-client-add-table_wrapper .dataTables_scrollHead, #demand-client-add-table_wrapper .dataTables_scrollHeadInner,
	#demand-client-address-add-table_wrapper .dataTables_scrollHead, #demand-client-address-add-table_wrapper .dataTables_scrollHeadInner {
		min-width: 910px;
	}

	@@media (min-width: 992px) {
		#demand-client-modal .modal-lg, .modal-xl {
			max-width: 1000px;
		}
	}

	button.badge-primary[disabled="disabled"] {
		background-color: #9e9e9e !important;
	}

	#demand-client-add-table tr.error {
		outline: 2px solid #de6060;
		outline-offset: -2px;
	}
</style>

<div class="row" id="demand-client-modal-inputs-get-clients">
	<div class="col-12">
		<div class="input-group mb-3">
			<input class="form-control required" data-error-message="Insira algum dado para buscar um gerador" placeholder="Procurar por Cliente/Código" id="client-selection-search" />
			<div class="input-group-append">
				<button type="button" class="btn btn-primary" onclick="getClients()"><i class="simple-icon-magnifier"></i>&nbsp;Buscar</button>
			</div>
		</div>
	</div>
	<div class="col-12 form-group">
		<table class="table table-bordered table-condensed" id="demand-client-add-table">
			<thead>
				<tr style="background: #a1a1a1; color: white;">
					<th class="text-center"><input type="checkbox" id="select-all-clients-checkbox" onclick="selectAllClientsCheckbox(this)" style="display: none;" /></th>
					<th>Código</th>
					<th>Gerador</th>
					<th>Endereço</th>
					<th>Situação</th>
					<th>Periodicidade</th>
					@*<th></th>*@
				</tr>
			</thead>
		</table>
	</div>
</div>

<script asp-cut-key-load-from-controller="@Model.LoadFromController" type="text/javascript" asp-cut-key="demand-client-selection">
    var demandClientAddTable, clientsSearched = [];
    var routeFamilyIds = [@(string.Join(",", Model.Model.ResidueFamilyIds))];//Familías existentes na rota selecionada

    $(document).ready(function () {
        demandClientAddTable = $('#demand-client-add-table').DataTable({
            proccessing: true,
            serverSide: false,
            searching: true,
            lengthChange: false,
            dom: 'tip',
            "paging": true,
            "info": false,
            scrollY: '400px',
            scrollCollapse: true,
            paging: false,
            'language': {
                "sEmptyTable": "Nenhum gerador encontrado (Altere o filtro e tente novamente)"
            },
            "columnDefs": [{ orderable: false, targets: [0] }],
            drawCallback: function () {
                $('#select-all-clients-checkbox')[0].checked = false;

                if (typeof _setSelectedClientAsUnselectable == 'function') _setSelectedClientAsUnselectable();
            }
        });

        updateCitySelect();

        setTimeout(function () {
            $('#demand-client-add-table').DataTable().columns.adjust();
        }, 1000); //atualiza a largura das colunas
    });


    function updateCitySelect() {
        $('#demand-client-modal [name="City"]').val('');

        var state = $('#demand-client-modal [name="State"]').val();

        $('#demand-client-modal [name="City"] option').hide();

        $('#demand-client-modal [name="City"] option').each(function (i, e) {
            if ($(e).data('state') == state) $(e).show();
        });
        $('#demand-client-modal [name="City"] option[value=""]').show();
    }

    function AddAddressToTable() {
        var state = $('#demand-client-modal [name="State"]').val();
        var city = $('#demand-client-modal [name="City"]').val();

        if (!validateInputs('demand-client-modal-inputs-set-city') || $('[data-state="' + state + '"][data-city="' + city + '"]').length > 0) return;

        var r = demandClientAddressAddTable.row.add({
            0: state,
            1: city,
            2: '<div class="text-center"><a href="javascript:removeAddress(\'' + state + '\', \'' + city + '\')" class="badge badge-danger badge-pill"><i class="fa fa-trash-o"></i> Remover</a></div>'
        });

        $(r.node()).attr('data-state', state);
        $(r.node()).attr('data-city', city);

        demandClientAddressAddTable.draw();
    }

    function removeAddress(state, city) {
        var row = demandClientAddressAddTable.row($('[data-state="' + state + '"][data-city="' + city + '"]'));
        row.remove();

        demandClientAddressAddTable.draw();
    }

    function getClients() {
        if (!validateInputs('demand-client-modal-inputs-get-clients')) return;

		$.post('@Url.Action("GetClients", "Demand")', { routeId: $('#demand-manage-form-area [name="RouteId"]').val(), Search: $('#client-selection-search').val(), notValidateFamily: $('#demand-manage-form-area [name="NotValidateFamily"]')[0].checked }, function (d) {
            demandClientAddTable.rows().remove();
            clientsSearched = d;

            $.each(d, function (i, element) {
                var e = element.item;

                var r = demandClientAddTable.row.add({
                    0: '<div class="text-center"><input type="checkbox" data-company-name="' + e.companyName + '" data-address-id="' + e.clientCollectionAddressId + '" data-family-length="' + element.families.length + '" data-contract-id="' + isNull(e.contractId, 'null') + '" data-service-id="' + isNull(e.serviceId, 'null') + '" /></div>',
                    1: '<div class="text-center">' + e.clientId + '</div>',
                    2: e.companyName,
                    3: e.address + ', ' + (isNullOrWhiteSpace(e.number) ? 'S/N' : e.number) + ' ' + e.city + ' - ' + e.state,
                    4: isNull(e.situationName, '-'),
                    5: e.periodicityName,
                    //6: '<div class="text-center"><button type="button" onclick="openSelectResidueFamilyModal(' + e.clientCollectionAddressId + ', ' + isNull(e.contractId, 'null') + ', ' + isNull(e.serviceId, 'null') + ', ' + element.families.length + ')" class="badge badge-pill badge-primary" disabled="disabled">Familías</button></div>',
                });

                $(r.node()).css('background-color', e.rowColor);
            });

            demandClientAddTable.draw();
            $('#demand-client-add-table').DataTable().columns.adjust();

            if (typeof _setSelectedClientAsUnselectable == 'function') _setSelectedClientAsUnselectable();//desabilita os checkbox selecionados

            initCheckboxFunc();
        });
    }

    function selectAddresses() {
        if (typeof setAddressInDemand != 'function' || !selectAdderssesValidate()) return;

        var p = [];
        $.each($('#demand-client-add-table input[type="checkbox"]:checked'), function (i, e) { //laço usado para possibilidade de varios geradores serem adicionados ao mesmo tempo (atualmente a regra permite apenas um gerador por vez)
            if ($(e).attr('disabled') == 'disabled') return;

            p.push({ name: 'ClientCollectionAddressIds.Index', value: i });
            p.push({ name: 'ClientCollectionAddressIds[' + i + ']', value: $(e).data('address-id') });
        });

        setAddressInDemand(p);

        if (typeof _setSelectedClientAsUnselectable == 'function') _setSelectedClientAsUnselectable();//desabilita os checkbox selecionados
    }

    function selectAdderssesValidate() {
        $('#demand-client-add-table tr').removeClass('error');

        var hasError = false;

        $.each($('#demand-client-add-table input[type="checkbox"]:checked'), function (i, e) {
            if ($(e).attr('disabled') == 'disabled' || addressFamilyIds.findIndex(x => x.clientCollectionAddressId == $(e).data('address-id')) != -1) return;

            var clientSearchedIndex = clientsSearched.findIndex(x => x.addressId == $(e).data('address-id')); //caso não tenha selecionado nenhuma familia, tenta obter as possiveis familias desse contrato/serviço e então vincula todas familias ao endereço
            if (clientSearchedIndex != -1) {
                if (clientsSearched[clientSearchedIndex].families.length > 0) {
                    selectResidueFamiliesCallback({
                        families: clientsSearched[clientSearchedIndex].families,
                        clientCollectionAddressId: $(e).data('address-id')
                    });

                    return;
                }
            }

            $(e).closest('tr').addClass('error');
            hasError = true;
        });

        if (hasError) {
            bootbox.alert('Selecione as famílias vinculadas ao Gerador a ser adicionado.');
        }

        return !hasError;
    }

    function setSelectedClientAsUnselectable(addressIds)
    {
        if (addressIds.length == 0) return;

        $.each(addressIds, function (i, e) {
            try {
                $('#demand-client-add-table input[type="checkbox"][data-address-id="' + e.addressId + '"]').attr('disabled', 'disabled');
                $('#demand-client-add-table input[type="checkbox"][data-address-id="' + e.addressId + '"]')[0].checked = true;
            } catch {}//É possivel que alguns checkbox não existam caso estejam em outras paginas da tabela
        });
    }

    function selectAllClientsCheckbox(sel) {
        $('#demand-client-add-table input[type="checkbox"]').each(function (i, e) {
            if ($(e).attr('disabled') == 'disabled') return;

            e.checked = sel.checked;
            $(e).closest('tr').find('button').attr('disabled', !this.checked);
        });
    }

    function initCheckboxFunc() {
        $('#demand-client-add-table input[type="checkbox"][data-address-id]').click(function () {
            var checked = this.checked;

            $('#demand-client-add-table input[type="checkbox"]').each(function (i, e) {
                if ($(e).attr('disabled') == 'disabled') return;

                e.checked = false;
                $(e).closest('tr').find('button').attr('disabled', true);
            });

            $(this).closest('tr').find('button').attr('disabled', !checked);
            this.checked = checked;


            if ($(this).data('family-length') == 0 && !$('#demand-manage-form-area [name="NotValidateFamily"]')[0].checked) {
                $(this).closest('tr').find('button').attr('disabled', true);
                this.checked = false;

                bootbox.alert('Este gerador não possuí nenhuma familía compativel.');
            }
        });
    }

    function openSelectResidueFamilyModal(addressId, contractId, serviceId, totalFamilies, editing) {
        if (addressId == null) {
            if ($('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').length == 0) {
                bootbox.alert('Nenhum gerador selecionado.');
                return;
            }
            addressId = $('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').data('address-id');
            totalFamilies = $('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').data('family-length');
            contractId = $('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').data('contract-id');

            serviceId = $('#demand-client-so-selection-table input[type="checkbox"]:not(:disabled):checked').length > 0 ? $('#demand-client-so-selection-table input[type="checkbox"]:not(:disabled):checked').data('selection-service-id') : $('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').data('service-id');
        }

        if (totalFamilies == 0 && !$('#demand-manage-form-area [name="NotValidateFamily"]')[0].checked) {
            bootbox.alert('Este gerador não possuí nenhuma familía compativel.');
            return;
        }

        if (editing == true) {
            $('#demand-client-family-modal-save-button').text('Salvar');
        } else {
            $('#demand-client-family-modal-save-button').text('Incluir Gerador');
        }

        $('#demand-client-modal').css('opacity', 0);

        $('#route-residue-family-view-component').empty();

		$('#route-residue-family-view-component').load('@Url.Action("RouteResidueFamilyViewComponent", "Route")', { addressId, contractId, serviceId }, function () {
            $('#demand-client-family-modal').modal('show');

            @if (usingRouteForContract) {
            <text>
			if (!$('#demand-manage-form-area [name="NotValidateFamily"]')[0].checked) {
                $.each($('#route-client-families-selection-table tbody tr[data-family-id]'), function (i, e) {// Caso seja rota de contrato - Se alguma familía não existe dentre as selecionadas na rota, ela será removida da listagem
                    if (routeFamilyIds.indexOf($(e).data('family-id')) != -1) return;

                    $(e).remove();
                });
            }

            if ($('#route-client-families-selection-table tbody tr[data-family-id]').length == 0) {
                $('#route-client-families-selection-table tbody').append($('<tr>').append($('<td>', {colspan: '4' }).append('<i>Não há nenhuma familía compativel para este gerador.</i>')));
            }
            </text>
            }

            //Setar famílias já selecionadas
            var index = addressFamilyIds.findIndex(x => (x.clientCollectionAddressId == addressId));

            if (index != -1) {
                $.each(addressFamilyIds[index].familyIds, function (i, e) {
                    var elem = $('#route-client-families-selection-table input[type="checkbox"][data-family-id="' + e + '"]');
                    if (elem.length > 0)
                        $(elem)[0].checked = true;
                });
            }
        });
    }

    function openSelectOSModal()
    {
		if ($('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').length == 0) {
			bootbox.alert('Nenhum gerador selecionado.');
			return;
		}

        $('#demand-client-modal').css('opacity', 0);

		$('#demand-client-so-select-view-component').empty();

		$('#demand-client-so-select-view-component').load('@Url.Action("LoadDemandClientSOSelectionViewComponent", "Demand")', { addressId: $('#demand-client-add-table input[type="checkbox"]:not(:disabled):checked').data('address-id') }, function () {
			$('#demand-client-so-select-modal').modal('show');
        });
    }

    function selectResidueFamiliesCallback(d) {
        //remove o dado do cliente caso ele já exista
        var index = addressFamilyIds.findIndex(x => x.clientCollectionAddressId == d.clientCollectionAddressId);
        var demandClientId = null;

        if (index != -1) {
            demandClientId = addressFamilyIds[index].demandClientId;
            addressFamilyIds.splice(index, 1);
        }

        if (d.families.length > 0) { //caso não tenha adicionado família e clique em salvar não seta os dados
            addressFamilyIds.push({
                familyIds: d.families.map(function (e, i) { return e.id; }),//apenas o Id da familia
                familyNames: d.families.map(function (e, i) { return e.name; }),//apenas o nome da familia
                clientCollectionAddressId: d.clientCollectionAddressId
            });
        }

        if (typeof setFamilyNames == 'function') {
            var names = [];
            addressFamilyIds.forEach(function (e, i) { names = names.concat(e.familyNames); });
            setFamilyNames(names);
        }

        $('#demand-client-family-modal').modal('hide');
    }

	$('#demand-client-family-modal').on('hidden.bs.modal', function () {
        $('#demand-client-modal').css('opacity', 1);

        //$('#demand-client-modal').modal('show');
    });


	$('#demand-client-so-select-modal').on('hidden.bs.modal', function () {
        if (!isNullOrWhiteSpace($(this).attr('not-open-demand-client-modal'))) {
            $(this).removeAttr('not-open-demand-client-modal')
        } else {
            $('#demand-client-modal').css('opacity', 1);
        }
	});

    $(document).ready(function () {
        $('#client-selection-search').bind("keypress", function (e) {
            if (e.keyCode == 13) {
                getClients();
            }
        });
    });
</script>