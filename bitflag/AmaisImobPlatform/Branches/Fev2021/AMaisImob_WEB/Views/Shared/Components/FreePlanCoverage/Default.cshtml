@model AMaisImob_WEB.Models.PlanViewModel
@using AMaisImob_WEB.Utils;

@{
    var notFreePlan = !Model.Certificate.CertificateId.HasValue && Model.PlanId.HasValue;

    var isUpdate = Model.Certificate.CertificateId.HasValue;

    //o certificado esta como renovação
    var isRenovation = isUpdate && (Model.Certificate.VigencyDate.IsInTimeToRenovate());
    bool isSimulation = !Model.Certificate.IsSimulation.HasValue || (Model.Certificate.IsSimulation.HasValue && Model.Certificate.IsSimulation.Value);
}
<div id="_FreePlanCoverageAlertError" class="alert alert-danger fade show text-center" role="alert" style="display: none;">
    <strong>Atenção!</strong> Deve ser preenchido a garantia de todas cobertura que serão utilizadas.
</div>
<div class="table-wrapper">
    <table id="_FreePlanCoverageIndexTable" class="table display responsive" style="border-collapse: collapse !important; width:100%;">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>Básica</th>
                <th>Usadas</th>
                <th>Nome</th>
                <th>Taxa (%)</th>
                <th>Mínimo (R$)</th>
                <th>Maximo (R$)</th>
                <th>Franquias</th>
                <th>Garantia (R$)</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>
<script type="text/javascript">
    var total = 0;
    var index = 1;
    var _FreePlanCoverageIndexTypingTimer;
    var _FreePlanCoverageIndexDoneTypingInterval = 500;
    var datatables = $('#_FreePlanCoverageIndexTable').DataTable({
        "order": [[0, "desc"]],
        columnDefs: [{
            targets: [0],
            orderData: [1, 0, 2]
        },
        {
            targets: [1],
            "visible": false
        },
        {
            targets: [2],
            "visible": false
        }],
		proccessing: true,
		serverSide: false,
		searching: true,
        lengthChange: false,
        bPaginate: false,
        info: false,
        iDisplayLength: 100,
		dom: 'tip',
		ajax: {
            url: '@Url.Action("PlanCoverageList", "Plan")',
            data: function (d) {
                d.productId = '@Model.ProductId',
                d.planId = @if(Model.PlanId.HasValue){<text>'@Model.PlanId'</text>}else{<text>null</text>}
            },
			type: 'POST'
		},
        columns: [
            {
                data: 'IsOptional',
                render: function (data, type, row) {
                    var disabled = false;
                    if (!row.isOptional) disabled = true;
                    @if (notFreePlan) { <text>disabled = true;</text> }
                    var used = false;
                    if (row.used != null) {
                        used = row.used;
                    }
                    return '<input id="ProductCoverageId_' + index + '" value="' + row.productCoverageId + '" data-minimum="' + row.realMinimum + '" data-maximum="' + row.realMaximum + '" data-current-maximum="' + row.realMaximum + '" data-basic="' + row.isBasic + '" data-basic-limit="' + row.basicLimit + '" data-taxes="' + row.taxes + '" type="hidden" /><div style="text-align:center;"><input id="Used_' + index + '" type="checkbox" ' + (disabled ? ' disabled ' : ' ') + (!row.isOptional || used ? ' checked ' : ' ') + ' onchange="_FreePlanCoverageChangeUsed(' + index + ');" /><span style="display:none;">' + !row.isOptional + '</span></div>';
                }
            },
            {
                data: 'IsBasic',
                render: function (data, type, row) {
                    return row.isBasic;
                }
            },
            {
                data: 'Used',
                render: function (data, type, row) {
                    var used = false;
                    if (row.used != null) {
                        used = row.used;
                    }
                    return used;
                }
            },
			{ data: 'Name',
                render: function (data, type, row) {
                    return row.name;
                }
            },
            {
                data: 'Taxes',
            render: function (data, type, row) {
                return '<span class="percent">' + row._Taxes + '</span>';
                }
            },
            {
                data: 'RealMinimum',
                render: function (data, type, row) {
                    return (row.realMinimum != null ? '<span id="MinimumLabel_' + index + '" class="money">' + row._RealMinimum + '</span>' : '-');
                }
            },
            {
                data: 'RealMaximum',
                render: function (data, type, row) {
                    return (row.realMaximum != null ? '<span id="MaximumLabel_' + index + '" class="money">' + row._RealMaximum + '</span>' : '-');
                }
            },
            {
                data: 'Franquias',
                render: function (data, type, row) {
                    return row.franquias != null ? row.franquias : '-';
                }
            },
            {
                data: null,
                render: function (data, type, row) {
                    var disabled = false;
                    var isFreePlan = false;

                    var used = false;
                    if (row.used != null) {
                        used = row.used;
                    }

                    if (row.isOptional && !used) disabled = true;
                    @if (notFreePlan) { <text>disabled = true;</text> }
                    @if (!notFreePlan) { <text>isFreePlan = true;</text> }

                    var onblur = 'onblur="' + (row.isBasic ? 'ChangeBasicGarantia(' + index + ');' : 'ValidateGarantia(' + index + ');') + (isFreePlan ? ' _FreePlanCoverageGetFreePlanPrice();' : '' ) + '"';

                    var r = '<div style="text-align:center; width:100%;"><input id="Garantia_' + index + '" style="padding: 0.090rem 0.75rem;" type="text" class="form-control money" Placeholder="Garantia de ' + row.name + '" ' + (row._Garantia != null ? 'value="' + row._Garantia + '"' : '') + onblur + (disabled? 'disabled' : '') + ' /></div>';

                    index++;
                    return r;
                }
            }
        ],
        initComplete: function (settings, json) {
            total = json.recordsFiltered;

            _MaskData();

            //função só existe quando a tela esta bloqueada
            if (typeof LockScreen == 'function') {
                LockScreen();
            }
            @if (!notFreePlan) { <text>
                _FreePlanCoverageGetFreePlanPrice();
            </text> }


            $('#_CertificateManagePlanCoverageViewComponent').css('height', ($('#_FreePlanCoverageIndexTable').height() + 20) + 'px' );
        },
        "rowCallback": function (row, data, index) {

            @if (notFreePlan) { <text>
            var used = false;
            if (data.used != null) {
                used = data.used;
            }
            if (data.isOptional && !used) {
                //console.log(row);
                $(row).hide();
            }
            </text> }

        }
    });

    function ChangeBasicGarantia(index) {
        var garantiaBasica = ValidateGarantia(index);

        for (var i = 1; i <= total; i++) {
            if (i == index) continue;

            var selector = $('#ProductCoverageId_' + i);

            var _max = selector.data('maximum');
            var basicLimit = selector.data('basic-limit');

            var max = _max > (garantiaBasica * basicLimit / 100) ? parseFloat(garantiaBasica * basicLimit / 100) : parseFloat(_max)

            selector.data('current-maximum', max);

            var maxString = $('.money').masked(max.toFixed(2));

            $('#MaximumLabel_' + i).text(maxString);

            //limpar todas as garantias
            $('#Garantia_' + i).val('');
        }
        //alert('Os valores máximos foram alterados de acordo com a garantia da cobertura básica.');

    }

    function ValidateGarantia(index) {
        var _garantia = $('#Garantia_' + index).val();

        garantia = MoneyToFloat(_garantia)

        var basicMax = $('#ProductCoverageId_' + index).data('current-maximum');
        var basicMin = $('#ProductCoverageId_' + index).data('minimum');

        if (basicMax != null && garantia > basicMax) {
            $('#Garantia_' + index).val($('.money').masked(basicMax.toFixed(2)));
            garantia = basicMax;
            //alert('A garantia foi alterada respeitando respeitando o valor máximo e mínimo.');
        }

        if (basicMin != null && garantia < basicMin) {
            $('#Garantia_' + index).val($('.money').masked(basicMin.toFixed(2)));
            garantia = basicMin;
            //alert('A garantia foi alterada respeitando respeitando o valor máximo e mínimo.');
        }

        return garantia;
    }

    function _FreePlanCoverageGetFreePlanPrice() {

        var freePlanPrice = 0.00;

        for (var i = 1; i <= total; i++) {
            var used = $('#Used_' + i)[0].checked;
            if (!used) continue;

            var selector = $('#ProductCoverageId_' + i);
            var taxes = selector.data('taxes');
            var garantia = MoneyToFloat($('#Garantia_' + i).val());

            freePlanPrice += (taxes / 100 * garantia);
        }

        if (typeof _CertificateManageGetFreePlanPrice == 'function') {
            _CertificateManageGetFreePlanPrice(freePlanPrice);
        }
    }

    function _FreePlanCoverageChangeUsed(index) {
        var used = $('#Used_' + index)[0].checked;

        if (used) {
            $('#Garantia_' + index).removeAttr('disabled');
        } else {
            $('#Garantia_' + index).val('').attr('disabled', 'disabled');
        }
        _FreePlanCoverageGetFreePlanPrice();
    }

    function _FreePlanCoverageValidacao() {
        var _FreePlanCoverageHasError = false;
        $('.text-danger').remove();

        for (var i = 1; i <= total; i++) {
            if ($('#Used_' + i)[0].checked && IsNullOrWhiteSpace($('#Garantia_' + i).val())) {
                _FreePlanCoverageHasError = true;
            }
        }

        if (_FreePlanCoverageHasError) {
            $('#_FreePlanCoverageAlertError').show();
        } else {
            $('#_FreePlanCoverageAlertError').hide();
        }

        return (!_FreePlanCoverageHasError);
    }

    function _FreePlanCoverageSavePlan(callback, isSumulation) {
        var planId = 0;
    @if (Model.PlanId.HasValue) {<text>
        planId = @Model.PlanId;
        _FreePlanCoverageSave(planId, callback, isSumulation);
        //callback(planId, isSumulation);
    </text>}
    else {<text>
        $.ajax({
            url: '@Url.Action("FreePlanSave", "Plan")',
            type: 'POST',
            dataType: 'JSON',
            data: { productId: @Model.ProductId },
            success: function (data) {
                planId = data.code;
                _FreePlanCoverageSave(planId, callback, isSumulation);
                //callback(planId);
            }
        });
    </text>}
    }

    function _FreePlanCoverageSave(planId, callback, isSumulation) {
        var model = [];
        for (var i = 1; i <= total; i++) {
            model.push({
                'ProductCoverageId': $('#ProductCoverageId_' + i).val(), 'Used': $('#Used_' + i)[0].checked, 'Garantia': $('#Garantia_' + i).val().replace(/\./g, '').replace(/\,/g, '.'), 'PlanId': planId, 'PlanCoverageId': null
            });
        }
        if (total == 0) {
            model.push({
                'ProductCoverageId': null, 'Used': null, 'Garantia': null, 'PlanId': @if (Model.PlanId.HasValue) {<text>'@Model.PlanId'</text>}else{<text>null</text>}, 'PlanCoverageId': null
            });
        }

        $.ajax({
            url: '@Url.Action("PlanCoverageSave", "Plan")',
            type: 'POST',
            data: JSON.stringify(model),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function () {
                callback(planId, isSumulation);
            }
        });
    }
</script>