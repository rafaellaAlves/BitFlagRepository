@model AMaisImob_WEB.Models.UserViewModel

@inject AMaisImob_WEB.BLL.CompanyFunctions companyFunctions
@inject AMaisImob_WEB.BLL.CompanyTypeFunctions companyTypeFunctions
@inject AMaisImob_WEB.BLL.UserCompanyFunctions userCompanyFunctions
@inject AMaisImob_WEB.BLL.RoleFunctions roleFunctions

@inject Microsoft.AspNetCore.Identity.UserManager<AMaisImob_DB.Models.User> userManager


@{
    int? loggedUserId = null;
    if (User.Identity.IsAuthenticated) {
        loggedUserId = (await userManager.GetUserAsync(User)).Id;
    }

    var realStateTypeId = companyTypeFunctions.GetDataByExternalCode("IMOBILIARIA").CompanyTypeId;
    var realStateAgencyTypeId = companyTypeFunctions.GetDataByExternalCode("CORRETORA").CompanyTypeId;

    int? userRealStateId = null, userRealStateAgencyId = null;

    if (Model.UserId.HasValue)
    {
        var userCompany = userCompanyFunctions.GetDataByUserId(Model.UserId.Value).FirstOrDefault();
        if (userCompany != null)
        {
            var company = companyFunctions.GetDataByID(userCompany.CompanyId);

            if (company.ParentCompanyId.HasValue)
            {
                userRealStateId = userCompany.CompanyId;
                userRealStateAgencyId = company.ParentCompanyId;
            }
            else
            {
                userRealStateAgencyId = userCompany.CompanyId;
            }
        }
    }

    bool fromRealEstateAgency = false; //informação vinda da tela de imobiliária, no caso de criação de usuário sócio
    if (ViewData["FromRealEstateAgency"] != null)
    {
        fromRealEstateAgency = (bool)ViewData["FromRealEstateAgency"];
    }
}
<script type="text/javascript">
    _MaskData();
</script>

<script type="text/javascript">

function _AccountManageSave() {
    var d = $('#_AccountManageForm').serializeArray();
    d.push({ 'name': 'Role', 'value': $('#_AccountManageRole').val() });

    if (!IsNullOrWhiteSpace($('#_AccountManageRealEstateId').val())) d.push({ 'name': 'CompanyId', 'value': $('#_AccountManageRealEstateId').val() });
    else if (!IsNullOrWhiteSpace($('#_AccountManageRealEstateAgencyId').val())) d.push({ 'name': 'CompanyId', 'value': $('#_AccountManageRealEstateAgencyId').val() });

    $.post('@Url.Action("Manage", "Account")', d, function (data) {
        if (data == 0) {
            $('#_AccountManageAlertSuccess').hide();
            $('#alertErrorUser').show();
            $('#_AccountManagePassword').after('<div class="text-danger">A senha deve conter pelo menos 6 letras.</div>');
        }
        else if (data != null) {
            _AccountManageCallBack(data);
		}
		else {
            $('#_AccountManageAlertSuccess').hide();
			$('#alertErrorUser').show();
		}
	});
}

function _AccountManageValidate() {

    var _AccountManagehasError = false;
	$('.text-danger').remove();

    if (IsNullOrWhiteSpace($('#_AccountManageFirstName').val())) {
        $('#_AccountManageFirstName').after('<div class="text-danger">Preencha o primeiro nome.</div>');
        _AccountManagehasError = true;
	}

    if (IsNullOrWhiteSpace($('#_AccountManageLastName').val())) {
        $('#_AccountManageLastName').after('<div class="text-danger">Preencha o sobrenome.</div>');
        _AccountManagehasError = true;
	}

    if (IsNullOrWhiteSpace($('#_AccountManageEmail').val())) {
        $('#_AccountManageEmail').after('<div class="text-danger">Preencha um e-mail.</div>');
        _AccountManagehasError = true;
    }

	@if (User.IsInRole("Administrator"))
    {
		<text>
        if ($('#_AccountManageRole').val() == "CORRETOR" && IsNullOrWhiteSpace($('#_AccountManageRealEstateAgencyId').val())) {
            $('#_AccountManageRealEstateAgencyId').after('<div class="text-danger">Escolha a corretora.</div>');
            _AccountManagehasError = true;
        }
		</text>
    }



    if ($('#_AccountManageRole').val().includes('IMOB') && IsNullOrWhiteSpace($('#_AccountManageRealEstateId').val())) {
        $('#_AccountManageRealEstateId').after('<div class="text-danger">Escolha a imobilíaria.</div>');
        _AccountManagehasError = true;
    }

	@if (Model.UserId == null)
    {
		<text>
    if (IsNullOrWhiteSpace($('#_AccountManagePassword').val())) {
        $('#_AccountManagePassword').after('<div class="text-danger">Defina uma senha.</div>');
        _AccountManagehasError = true;
    }
    else if ($('#_AccountManagePassword').val().length < 6) {
        $('#_AccountManagePassword').after('<div class="text-danger">A senha deve conter ao menos 6 caracteres.</div>');
        _AccountManagehasError = true;
    }

    if (IsNullOrWhiteSpace($('#_AccountManagePasswordConfirmation').val())) {
        $('#_AccountManagePasswordConfirmation').after('<div class="text-danger">Preencha a confirmação de senha.</div>');
        _AccountManagehasError = true;
	}

    if ($('#_AccountManagePasswordConfirmation').val() != $('#_AccountManagePassword').val()) {
        $('#_AccountManagePasswordConfirmation').after('<div class="text-danger">Senha de Confirmação errada.</div>');
		_AccountManagehasError = true;
	}
	</text>
    }
    if (_AccountManagehasError) {
        $('#_AccountManageAlertError').show();
    } else {
        $('#_AccountManageAlertError').hide();
    }

    return (!_AccountManagehasError);
}

</script>

<script type="text/javascript">
    function _UserTakeOffSuccessAlert() {
        $('#_AccountManageAlertSuccess').hide();
    }
</script>

<div id="_AccountManageAlertSuccess" class="alert alert-success fade show text-center" style="display: none;">
    <b>Os dados foram salvos com sucesso!</b>
</div>
<div id="_AccountManageAlertError" class="alert alert-danger fade show text-center" role="alert" style="display: none;">
    <strong>Atenção!</strong> O Formulário contém erros.
</div>
<form id="_AccountManageForm" method="post">
    <input type="hidden" id="_AccountManageUserId" name="UserId" value="@Model.UserId" />
    <div class="form-row">
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManageFirstName">Nome*</label>
            <input type="text" class="form-control" id="_AccountManageFirstName" name="FirstName" value="@Model.FirstName" placeholder="Nome">
        </div>
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManageLastName">Sobrenome*</label>
            <input type="text" class="form-control" id="_AccountManageLastName" name="LastName" value="@Model.LastName" placeholder="Sobrenome">
        </div>
        <div class="form-group col-md-3">
            <label class="control-label">Data de Nascimento:</label>
            <input type="text" class="form-control date" id="_AccountManageBornDate" name="_BornDate" value="@Model._BornDate" placeholder="Data de Nascimento">
        </div>
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManageEmail">E-mail*</label>
            <input type="email" class="form-control" id="_AccountManageEmail" name="Email" value="@Model.Email" placeholder="E-mail">
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManagePassword">Senha*</label>
            <input type="password" class="form-control" id="_AccountManagePassword" name="Password" value="" placeholder="Senha">
        </div>
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManagePasswordConfirmation">Confirmação de Senha*</label>
            <input type="password" class="form-control" id="_AccountManagePasswordConfirmation" value="" placeholder="Confirmação de Senha">
        </div>
        @*<div class="form-group col-md-3">
                <label class="control-label" for="_AccountManagePhoneNumber">Telefone</label>
                <input type="text" class="form-control phone" id="_AccountManagePhoneNumber" name="PhoneNumber" value="@Model.PhoneNumber" placeholder="Telefone">
            </div>*@
        <div class="form-group col-md-3">
            <label class="control-label" for="_AccountManageMobileNumber">Celular</label>
            <input type="text" class="form-control mobile" id="_AccountManageMobileNumber" name="MobileNumber" value="@Model.MobileNumber" placeholder="Celular">
        </div>

        @if (fromRealEstateAgency)
        {
            <input type="hidden" name="Role" id="_AccountManageRole" value="-1" />//Não travar na validação, o perfil real é inserido no controller
        }
        else
        {
            <div class="form-group col-md-2">
                <label class="control-label">Perfil</label>
                <select class="form-control" id="_AccountManageRole" onchange="changeRoles()">
                    @foreach (var role in roleFunctions.GetData().OrderBy(x => x.Name))
                    {
                        if (User.IsInRole("Corretor") && role.NormalizedName != "IMOBILIARIOADMINISTRATIVO" && role.NormalizedName != "IMOBILIARIAVENDAS" && role.NormalizedName != "IMOBILIARIOSOCIO" && role.NormalizedName != "CORRETOR") { continue; }

                        if (User.IsInRole("Corretor") && loggedUserId == Model.UserId && role.NormalizedName != "CORRETOR") { continue; }

                        if (Model.Role == role.Description)
                        {
                            <option value="@role.NormalizedName" selected>@role.Description</option>
                            continue;
                        }
                        <option value="@role.NormalizedName">@role.Description</option>

                    }
                </select>
            </div>
        }
        <div class="form-group col-md">
            <label class="control-label">Ativo?</label>
            <select class="form-control" id="_AccountManageIsActive" name="IsActive">
                <option value="True" selected="selected">Sim</option>
                <option value="False">Não</option>
            </select>
        </div>
    </div>
    @if (!fromRealEstateAgency)
    {
        <div class="row">
            @if (User.IsInRole("Administrator"))
            {
                <div class="col-md-3" id="_AccountManageRealEstateAgencyArea" style="@(Model.Role == "Corretor de Seguros" || AMaisImob_WEB.Utils.ClaimUtils.GetRealEstateRoles().Select(x => x.Description).Contains(Model.Role)? "" : "display:none;")">
                    <label>Corretora</label>
                    <select class="form-control" id="_AccountManageRealEstateAgencyId" onchange="GetRealEstates()" name="RealEstateAgencyId">
                        <option value="">Selecione</option>
                        @foreach (var item in companyFunctions.GetData(x => x.CompanyTypeId == realStateAgencyTypeId))
                        {
                            var name = string.IsNullOrWhiteSpace(item.RazaoSocial) ? item.FirstName + " " + item.LastName : item.RazaoSocial;

                            if (userRealStateAgencyId == item.CompanyId)
                            {
                                <option value="@item.CompanyId" selected>@name</option>
                                continue;
                            }

                            <option value="@item.CompanyId">@name</option>
                        }
                    </select>
                </div>
            }
            else if(User.IsInRole("Corretor"))
            {
                <input type="hidden" id="_AccountManageRealEstateAgencyId" name="RealEstateAgencyId" value="@userCompanyFunctions.GetDataByUserId(loggedUserId.Value).Select(x => x.CompanyId).First()" />

            }
            <div class="form-group col-md-3" id="_AccountManageRealEstateArea" style="@(AMaisImob_WEB.Utils.ClaimUtils.GetRealEstateRoles().Select(x => x.Description).Contains(Model.Role)? "" : "display:none;")">
                <label>Imobiliária</label>
                <select class="form-control" id="_AccountManageRealEstateId">
                    <option value="">Selecione</option>
                    @if (User.IsInRole("Corretor"))
                    {
                        var companyIds = userCompanyFunctions.GetDataByUserId(loggedUserId.Value).Select(x => x.CompanyId).ToList();

                        foreach (var item in companyFunctions.GetData(x => x.CompanyTypeId == realStateTypeId && companyIds.Contains(x.ParentCompanyId ?? -1)))
                        {
                            var name = string.IsNullOrWhiteSpace(item.RazaoSocial) ? item.FirstName + " " + item.LastName : item.RazaoSocial;
                            if (userRealStateId == item.CompanyId)
                            {
                                <option selected value="@item.CompanyId">@name</option>
                                continue;
                            }

                            <option value="@item.CompanyId">@name</option>
                        }
                    }
                    @if (User.IsInRole("Administrator") && userRealStateAgencyId.HasValue)
                    {
                        foreach (var item in companyFunctions.GetData(x => x.CompanyTypeId == realStateTypeId && x.ParentCompanyId == userRealStateAgencyId))
                        {
                            var name = string.IsNullOrWhiteSpace(item.RazaoSocial) ? item.FirstName + " " + item.LastName : item.RazaoSocial;
                            if (userRealStateId == item.CompanyId)
                            {
                                <option selected value="@item.CompanyId">@name</option>
                                continue;
                            }

                            <option value="@item.CompanyId">@name</option>
                        }
                    }
                </select>
            </div>
        </div>
    }
    @if (Model != null && Model.UserId != null)
    {
        <script type="text/javascript">
        $('#_AccountManageIsActive').find('[value=' + "@Model.IsActive" + ']').attr('selected', true);
        </script>
    }
</form>
<script type="text/javascript">
    function GetRealEstates() {
        if (IsNullOrWhiteSpace($('#_AccountManageRealEstateAgencyId').val())) {
            $('#_AccountManageRealEstateId').empty();
            $('#_AccountManageRealEstateId').append($('<option>', { value: '' }).append('Selecione um corretora.'));
        }
        else {
            $.ajax({
                url: '@Url.Action("GetRealEstatesByRealEstateAgencyId", "Company")',
                type: 'POST',
                datatype: 'JSON',
                data: { id: $('#_AccountManageRealEstateAgencyId').val() },
                success: function (data) {
                    $('#_AccountManageRealEstateId').empty();
                    if (data == false || data.length == 0) {
                        $('#_AccountManageRealEstateId').append($('<option>', { value: '' }).append('Nenhuma imobiliária encontrada.'));
                    }
                    if (data.length > 0) {
                        $('#_AccountManageRealEstateId').append($('<option>', { value: '' }).append('Selecione'));
                        for (var i = 0; i < data.length; i++) {
                            var companyName = IsNullOrWhiteSpace(data[i].razaoSocial) ? data[i].firstName + " " + data[i].lastName : data[i].razaoSocial;
                            var option = $('<option>', { value: data[i].companyId }).append(companyName);
                            $('#_AccountManageRealEstateId').append(option);
                        }
                    }
                }
            });
        }
    }

    function changeRoles() {
        $('#_AccountManageRealEstateAgencyArea').hide();
        $('#_AccountManageRealEstateArea').hide();
        $('#_AccountManageRealEstateId').val('');

	    @if (User.IsInRole("Administrator")) { <text> $('#_AccountManageRealEstateAgencyId').val(''); </text> }

        if ($('#_AccountManageRole').val() == 'CORRETOR') {
            $('#_AccountManageRealEstateAgencyArea').show();
        }
        else if ($('#_AccountManageRole').val().includes('IMOB')) {
            $('#_AccountManageRealEstateAgencyArea').show();
            $('#_AccountManageRealEstateArea').show();
        }
    }
</script>